:py:mod:`whylogs.core.configs`
==============================

.. py:module:: whylogs.core.configs


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   whylogs.core.configs.FrequentItemsErrorType
   whylogs.core.configs.SummaryConfig




Attributes
~~~~~~~~~~

.. autoapisummary::

   whylogs.core.configs.hll_lg_k
   whylogs.core.configs.kll_k
   whylogs.core.configs.fi_lg_max_k
   whylogs.core.configs.fi_disabled
   whylogs.core.configs.track_unicode_ranges
   whylogs.core.configs.large_kll_k
   whylogs.core.configs.kll_k_large
   whylogs.core.configs.unicode_ranges
   whylogs.core.configs.lower_case
   whylogs.core.configs.normalize
   whylogs.core.configs.max_frequent_item_size
   whylogs.core.configs.identity_column
   whylogs.core.configs.column_batch_size


.. py:data:: hll_lg_k
   :type: int
   :value: 12

   

.. py:data:: kll_k
   :type: int
   :value: 256

   

.. py:data:: fi_lg_max_k
   :type: int
   :value: 10

   

.. py:data:: fi_disabled
   :type: bool
   :value: False

   

.. py:data:: track_unicode_ranges
   :type: bool
   :value: False

   

.. py:data:: large_kll_k
   :type: bool
   :value: True

   

.. py:data:: kll_k_large
   :type: int
   :value: 1024

   

.. py:data:: unicode_ranges
   :type: Dict[str, Tuple[int, int]]

   

.. py:data:: lower_case
   :type: bool
   :value: True

   

.. py:data:: normalize
   :type: bool
   :value: True

   

.. py:data:: max_frequent_item_size
   :type: int
   :value: 128

   

.. py:data:: identity_column
   :type: Optional[str]

   

.. py:data:: column_batch_size
   :type: Optional[int]
   :value: 1024

   

.. py:class:: FrequentItemsErrorType

   Bases: :py:obj:`int`, :py:obj:`enum.Enum`

   int([x]) -> integer
   int(x, base=10) -> integer

   Convert a number or string to an integer, or return 0 if no arguments
   are given.  If x is a number, return x.__int__().  For floating point
   numbers, this truncates towards zero.

   If x is not a number or if base is given, then x must be a string,
   bytes, or bytearray instance representing an integer literal in the
   given base.  The literal can be preceded by '+' or '-' and be surrounded
   by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
   Base 0 means to interpret the base from the string as an integer literal.
   >>> int('0b100', base=0)
   4

   .. py:class:: denominator

      the denominator of a rational number in lowest terms


   .. py:class:: imag

      the imaginary part of a complex number


   .. py:class:: numerator

      the numerator of a rational number in lowest terms


   .. py:class:: real

      the real part of a complex number


   .. py:attribute:: NO_FALSE_NEGATIVES
      :value: 1

      

   .. py:attribute:: NO_FALSE_POSITIVES
      :value: 0

      

   .. py:method:: to_datasketches_type() -> whylogs_sketching.frequent_items_error_type


   .. py:method:: as_integer_ratio()

      Return integer ratio.

      Return a pair of integers, whose ratio is exactly equal to the original int
      and with a positive denominator.

      >>> (10).as_integer_ratio()
      (10, 1)
      >>> (-10).as_integer_ratio()
      (-10, 1)
      >>> (0).as_integer_ratio()
      (0, 1)


   .. py:method:: bit_length()

      Number of bits necessary to represent self in binary.

      >>> bin(37)
      '0b100101'
      >>> (37).bit_length()
      6


   .. py:method:: conjugate()

      Returns self, the complex conjugate of any int.


   .. py:method:: to_bytes()

      Return an array of bytes representing an integer.

      length
        Length of bytes object to use.  An OverflowError is raised if the
        integer is not representable with the given number of bytes.
      byteorder
        The byte order used to represent the integer.  If byteorder is 'big',
        the most significant byte is at the beginning of the byte array.  If
        byteorder is 'little', the most significant byte is at the end of the
        byte array.  To request the native byte order of the host system, use
        `sys.byteorder' as the byte order value.
      signed
        Determines whether two's complement is used to represent the integer.
        If signed is False and a negative integer is given, an OverflowError
        is raised.


   .. py:method:: name()

      The name of the Enum member.


   .. py:method:: value()

      The value of the Enum member.



.. py:class:: SummaryConfig

   .. py:attribute:: disabled_metrics
      :type: List[str]

      

   .. py:attribute:: frequent_items_error_type
      :type: FrequentItemsErrorType

      

   .. py:attribute:: frequent_items_limit
      :type: int

      

   .. py:attribute:: hll_stddev
      :type: int
      :value: 1

      


