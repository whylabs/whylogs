:py:mod:`whylogs.core.metrics.metrics`
======================================

.. py:module:: whylogs.core.metrics.metrics


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   whylogs.core.metrics.metrics.MetricConfig
   whylogs.core.metrics.metrics.OperationResult
   whylogs.core.metrics.metrics.Metric
   whylogs.core.metrics.metrics.IntsMetric
   whylogs.core.metrics.metrics.DistributionMetric
   whylogs.core.metrics.metrics.FrequentItem
   whylogs.core.metrics.metrics.FrequentItemsMetric
   whylogs.core.metrics.metrics.CardinalityMetric
   whylogs.core.metrics.metrics.CustomMetricBase
   whylogs.core.metrics.metrics.CardinalityThresholds



Functions
~~~~~~~~~

.. autoapisummary::

   whylogs.core.metrics.metrics.custom_metric
   whylogs.core.metrics.metrics.register_metric



Attributes
~~~~~~~~~~

.. autoapisummary::

   whylogs.core.metrics.metrics.T
   whylogs.core.metrics.metrics.M
   whylogs.core.metrics.metrics.NUM
   whylogs.core.metrics.metrics.METRIC


.. py:data:: T

   

.. py:data:: M

   

.. py:data:: NUM

   

.. py:data:: METRIC

   

.. py:class:: MetricConfig

   .. py:attribute:: hll_lg_k
      :type: int

      

   .. py:attribute:: kll_k
      :type: int

      

   .. py:attribute:: fi_lg_max_k
      :type: int

      

   .. py:attribute:: fi_disabled
      :type: bool

      

   .. py:attribute:: track_unicode_ranges
      :type: bool

      

   .. py:attribute:: large_kll_k
      :type: bool

      

   .. py:attribute:: kll_k_large
      :type: int

      

   .. py:attribute:: unicode_ranges
      :type: Dict[str, Tuple[int, int]]

      

   .. py:attribute:: lower_case
      :type: bool

      

   .. py:attribute:: normalize
      :type: bool

      

   .. py:attribute:: max_frequent_item_size
      :type: int

      

   .. py:attribute:: identity_column
      :type: Optional[str]

      


.. py:function:: custom_metric(metric: Type[METRIC]) -> Type[METRIC]


.. py:class:: OperationResult

   .. py:attribute:: failures
      :type: int
      :value: 0

      

   .. py:attribute:: successes
      :type: int
      :value: 0

      

   .. py:method:: ok(cnt: int = 1) -> OperationResult
      :classmethod:


   .. py:method:: failed(cnt: int = 1) -> OperationResult
      :classmethod:



.. py:class:: Metric

   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:property:: namespace
      :type: str
      :abstractmethod:


   .. py:method:: get_namespace(config: Optional[MetricConfig] = None) -> str
      :classmethod:


   .. py:method:: merge(other: METRIC) -> METRIC


   .. py:method:: to_protobuf() -> whylogs.core.proto.MetricMessage


   .. py:method:: get_component_paths() -> List[str]


   .. py:method:: to_summary_dict(cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> Dict[str, Any]
      :abstractmethod:


   .. py:method:: columnar_update(data: whylogs.core.preprocessing.PreprocessedColumn) -> OperationResult
      :abstractmethod:


   .. py:method:: zero(config: Optional[MetricConfig] = None) -> METRIC
      :classmethod:
      :abstractmethod:


   .. py:method:: from_protobuf(msg: whylogs.core.proto.MetricMessage) -> METRIC
      :classmethod:



.. py:function:: register_metric(metrics: Union[Metric, Type[METRIC], List[Metric], List[Type[METRIC]]]) -> None


.. py:class:: IntsMetric

   Bases: :py:obj:`Metric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:property:: namespace
      :type: str


   .. py:property:: maximum
      :type: float


   .. py:property:: minimum
      :type: float


   .. py:attribute:: max
      :type: whylogs.core.metrics.metric_components.MaxIntegralComponent

      

   .. py:attribute:: min
      :type: whylogs.core.metrics.metric_components.MinIntegralComponent

      

   .. py:method:: columnar_update(data: whylogs.core.preprocessing.PreprocessedColumn) -> OperationResult


   .. py:method:: zero(config: Optional[MetricConfig] = None) -> IntsMetric
      :classmethod:


   .. py:method:: to_summary_dict(cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> Dict[str, Union[int, float, str, None]]


   .. py:method:: get_namespace(config: Optional[MetricConfig] = None) -> str
      :classmethod:


   .. py:method:: merge(other: METRIC) -> METRIC


   .. py:method:: to_protobuf() -> whylogs.core.proto.MetricMessage


   .. py:method:: get_component_paths() -> List[str]


   .. py:method:: from_protobuf(msg: whylogs.core.proto.MetricMessage) -> METRIC
      :classmethod:



.. py:class:: DistributionMetric

   Bases: :py:obj:`Metric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:property:: namespace
      :type: str


   .. py:property:: n
      :type: float


   .. py:property:: variance
      :type: float

      Returns the sample variance of the stream.

      https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm

   .. py:property:: stddev
      :type: float


   .. py:property:: avg
      :type: float


   .. py:property:: median
      :type: Optional[float]


   .. py:property:: q_01
      :type: Optional[float]


   .. py:property:: q_05
      :type: Optional[float]


   .. py:property:: q_10
      :type: Optional[float]


   .. py:property:: q_25
      :type: Optional[float]


   .. py:property:: q_75
      :type: Optional[float]


   .. py:property:: q_90
      :type: Optional[float]


   .. py:property:: q_95
      :type: Optional[float]


   .. py:property:: q_99
      :type: Optional[float]


   .. py:property:: max
      :type: float


   .. py:property:: min
      :type: float


   .. py:attribute:: kll
      :type: whylogs.core.metrics.metric_components.KllComponent

      

   .. py:attribute:: mean
      :type: whylogs.core.metrics.metric_components.FractionalComponent

      

   .. py:attribute:: m2
      :type: whylogs.core.metrics.metric_components.FractionalComponent

      

   .. py:method:: to_summary_dict(cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> Dict[str, Union[int, float, str, None]]


   .. py:method:: columnar_update(view: whylogs.core.preprocessing.PreprocessedColumn) -> OperationResult

      Update the operation

      Algorithm: https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Parallel_algorithm

      :param view: the preprocessed column

      :returns: how many successful operations we had


   .. py:method:: merge(other: DistributionMetric) -> DistributionMetric


   .. py:method:: get_quantile(quantile: float) -> Optional[float]


   .. py:method:: zero(config: Optional[MetricConfig] = None) -> DistributionMetric
      :classmethod:


   .. py:method:: get_namespace(config: Optional[MetricConfig] = None) -> str
      :classmethod:


   .. py:method:: to_protobuf() -> whylogs.core.proto.MetricMessage


   .. py:method:: get_component_paths() -> List[str]


   .. py:method:: from_protobuf(msg: whylogs.core.proto.MetricMessage) -> METRIC
      :classmethod:



.. py:class:: FrequentItem

   .. py:attribute:: value
      :type: str

      

   .. py:attribute:: est
      :type: int

      

   .. py:attribute:: upper
      :type: int

      

   .. py:attribute:: lower
      :type: int

      


.. py:class:: FrequentItemsMetric

   Bases: :py:obj:`Metric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:property:: namespace
      :type: str


   .. py:property:: strings
      :type: List[FrequentItem]


   .. py:attribute:: frequent_strings
      :type: whylogs.core.metrics.metric_components.FrequentStringsComponent

      

   .. py:attribute:: max_frequent_item_size
      :type: int
      :value: 128

      

   .. py:method:: columnar_update(view: whylogs.core.preprocessing.PreprocessedColumn) -> OperationResult


   .. py:method:: to_summary_dict(cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> Dict[str, Any]


   .. py:method:: zero(config: Optional[MetricConfig] = None) -> FrequentItemsMetric
      :classmethod:


   .. py:method:: get_namespace(config: Optional[MetricConfig] = None) -> str
      :classmethod:


   .. py:method:: merge(other: METRIC) -> METRIC


   .. py:method:: to_protobuf() -> whylogs.core.proto.MetricMessage


   .. py:method:: get_component_paths() -> List[str]


   .. py:method:: from_protobuf(msg: whylogs.core.proto.MetricMessage) -> METRIC
      :classmethod:



.. py:class:: CardinalityMetric

   Bases: :py:obj:`Metric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:property:: namespace
      :type: str


   .. py:property:: estimate
      :type: Optional[float]


   .. py:property:: upper_1
      :type: Optional[float]


   .. py:property:: lower_1
      :type: Optional[float]


   .. py:attribute:: hll
      :type: whylogs.core.metrics.metric_components.HllComponent

      

   .. py:method:: columnar_update(view: whylogs.core.preprocessing.PreprocessedColumn) -> OperationResult


   .. py:method:: to_summary_dict(cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> Dict[str, Any]


   .. py:method:: get_upper_bound(number_of_standard_deviations: int) -> Optional[float]


   .. py:method:: get_lower_bound(number_of_standard_deviations: int) -> Optional[float]


   .. py:method:: zero(config: Optional[MetricConfig] = None) -> CardinalityMetric
      :classmethod:


   .. py:method:: get_namespace(config: Optional[MetricConfig] = None) -> str
      :classmethod:


   .. py:method:: merge(other: METRIC) -> METRIC


   .. py:method:: to_protobuf() -> whylogs.core.proto.MetricMessage


   .. py:method:: get_component_paths() -> List[str]


   .. py:method:: from_protobuf(msg: whylogs.core.proto.MetricMessage) -> METRIC
      :classmethod:



.. py:class:: CustomMetricBase

   Bases: :py:obj:`Metric`, :py:obj:`abc.ABC`

   You can use this as a base class for custom metrics that don't use
   the supplied or custom MetricComponents. Subclasses must be decorated with
   @dataclass. All fields not prefixed with an underscore will be included
   in the summary and will be [de]serialized. Such subclasses will need to
   implement the namespace, merge, and zero methods. They should be registered
   by calling register_metric()

   .. py:property:: namespace
      :type: str
      :abstractmethod:


   .. py:method:: get_component_paths() -> List[str]


   .. py:method:: to_summary_dict(cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> Dict[str, Any]


   .. py:method:: to_protobuf() -> whylogs.core.proto.MetricMessage


   .. py:method:: from_protobuf(msg: whylogs.core.proto.MetricMessage) -> METRIC
      :classmethod:


   .. py:method:: get_namespace(config: Optional[MetricConfig] = None) -> str
      :classmethod:


   .. py:method:: merge(other: METRIC) -> METRIC


   .. py:method:: columnar_update(data: whylogs.core.preprocessing.PreprocessedColumn) -> OperationResult
      :abstractmethod:


   .. py:method:: zero(config: Optional[MetricConfig] = None) -> METRIC
      :classmethod:
      :abstractmethod:



.. py:class:: CardinalityThresholds

   .. py:attribute:: few
      :type: int
      :value: 50

      

   .. py:attribute:: proportionately_few
      :type: float
      :value: 0.01

      


