:py:mod:`whylogs.core.metrics.column_metrics`
=============================================

.. py:module:: whylogs.core.metrics.column_metrics


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   whylogs.core.metrics.column_metrics.TypeCountersMetric
   whylogs.core.metrics.column_metrics.ColumnCountsMetric




.. py:class:: TypeCountersMetric

   Bases: :py:obj:`whylogs.core.metrics.metrics.Metric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:property:: namespace
      :type: str


   .. py:property:: exclude_from_serialization
      :type: bool


   .. py:attribute:: integral
      :type: whylogs.core.metrics.metric_components.IntegralComponent

      

   .. py:attribute:: fractional
      :type: whylogs.core.metrics.metric_components.IntegralComponent

      

   .. py:attribute:: boolean
      :type: whylogs.core.metrics.metric_components.IntegralComponent

      

   .. py:attribute:: string
      :type: whylogs.core.metrics.metric_components.IntegralComponent

      

   .. py:attribute:: object
      :type: whylogs.core.metrics.metric_components.IntegralComponent

      

   .. py:attribute:: tensor
      :type: whylogs.core.metrics.metric_components.IntegralComponent

      

   .. py:method:: to_summary_dict(cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> Dict[str, Any]


   .. py:method:: columnar_update(data: whylogs.core.preprocessing.PreprocessedColumn) -> whylogs.core.metrics.metrics.OperationResult


   .. py:method:: zero(config: Optional[whylogs.core.metrics.metrics.MetricConfig] = None) -> TypeCountersMetric
      :classmethod:


   .. py:method:: get_namespace(config: Optional[MetricConfig] = None) -> str
      :classmethod:


   .. py:method:: merge(other: METRIC) -> METRIC


   .. py:method:: to_protobuf() -> whylogs.core.proto.MetricMessage


   .. py:method:: get_component_paths() -> List[str]


   .. py:method:: from_protobuf(msg: whylogs.core.proto.MetricMessage) -> METRIC
      :classmethod:



.. py:class:: ColumnCountsMetric

   Bases: :py:obj:`whylogs.core.metrics.metrics.Metric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:property:: namespace
      :type: str


   .. py:property:: exclude_from_serialization
      :type: bool


   .. py:attribute:: n
      :type: whylogs.core.metrics.metric_components.IntegralComponent

      

   .. py:attribute:: null
      :type: whylogs.core.metrics.metric_components.IntegralComponent

      

   .. py:attribute:: nan
      :type: whylogs.core.metrics.metric_components.IntegralComponent

      

   .. py:attribute:: inf
      :type: whylogs.core.metrics.metric_components.IntegralComponent

      

   .. py:attribute:: true
      :type: whylogs.core.metrics.metric_components.IntegralComponent

      

   .. py:method:: columnar_update(data: whylogs.core.preprocessing.PreprocessedColumn) -> whylogs.core.metrics.metrics.OperationResult


   .. py:method:: to_summary_dict(cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> Dict[str, Any]


   .. py:method:: zero(config: Optional[whylogs.core.metrics.metrics.MetricConfig] = None) -> ColumnCountsMetric
      :classmethod:


   .. py:method:: get_namespace(config: Optional[MetricConfig] = None) -> str
      :classmethod:


   .. py:method:: merge(other: METRIC) -> METRIC


   .. py:method:: to_protobuf() -> whylogs.core.proto.MetricMessage


   .. py:method:: get_component_paths() -> List[str]


   .. py:method:: from_protobuf(msg: whylogs.core.proto.MetricMessage) -> METRIC
      :classmethod:



