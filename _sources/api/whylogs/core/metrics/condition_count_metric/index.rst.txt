:py:mod:`whylogs.core.metrics.condition_count_metric`
=====================================================

.. py:module:: whylogs.core.metrics.condition_count_metric


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   whylogs.core.metrics.condition_count_metric.Condition
   whylogs.core.metrics.condition_count_metric.ConditionCountConfig
   whylogs.core.metrics.condition_count_metric.ConditionCountMetric



Functions
~~~~~~~~~

.. autoapisummary::

   whylogs.core.metrics.condition_count_metric.relation
   whylogs.core.metrics.condition_count_metric.and_relations
   whylogs.core.metrics.condition_count_metric.or_relations
   whylogs.core.metrics.condition_count_metric.not_relation



Attributes
~~~~~~~~~~

.. autoapisummary::

   whylogs.core.metrics.condition_count_metric.logger
   whylogs.core.metrics.condition_count_metric.Relation


.. py:data:: logger

   

.. py:data:: Relation

   

.. py:function:: relation(op: Relation, value: Union[str, int, float]) -> Callable[[Any], bool]


.. py:function:: and_relations(left: Callable[[Any], bool], right: Callable[[Any], bool]) -> Callable[[Any], bool]


.. py:function:: or_relations(left: Callable[[Any], bool], right: Callable[[Any], bool]) -> Callable[[Any], bool]


.. py:function:: not_relation(relation: Callable[[Any], bool]) -> Callable[[Any], bool]


.. py:class:: Condition

   .. py:attribute:: relation
      :type: Callable[[Any], bool]

      

   .. py:attribute:: throw_on_failure
      :type: bool
      :value: False

      

   .. py:attribute:: log_on_failure
      :type: bool
      :value: False

      

   .. py:attribute:: actions
      :type: List[Callable[[str, str, Any], None]]

      


.. py:class:: ConditionCountConfig

   Bases: :py:obj:`whylogs.core.metrics.metrics.MetricConfig`

   .. py:attribute:: conditions
      :type: Dict[str, Condition]

      

   .. py:attribute:: hll_lg_k
      :type: int

      

   .. py:attribute:: kll_k
      :type: int

      

   .. py:attribute:: fi_lg_max_k
      :type: int

      

   .. py:attribute:: fi_disabled
      :type: bool

      

   .. py:attribute:: track_unicode_ranges
      :type: bool

      

   .. py:attribute:: large_kll_k
      :type: bool

      

   .. py:attribute:: kll_k_large
      :type: int

      

   .. py:attribute:: unicode_ranges
      :type: Dict[str, Tuple[int, int]]

      

   .. py:attribute:: lower_case
      :type: bool

      

   .. py:attribute:: normalize
      :type: bool

      

   .. py:attribute:: max_frequent_item_size
      :type: int

      

   .. py:attribute:: identity_column
      :type: Optional[str]

      


.. py:class:: ConditionCountMetric

   Bases: :py:obj:`whylogs.core.metrics.metrics.Metric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:property:: namespace
      :type: str


   .. py:attribute:: conditions
      :type: Dict[str, Condition]

      

   .. py:attribute:: total
      :type: whylogs.core.metrics.metric_components.IntegralComponent

      

   .. py:attribute:: matches
      :type: Dict[str, whylogs.core.metrics.metric_components.IntegralComponent]

      

   .. py:method:: merge(other: ConditionCountMetric) -> ConditionCountMetric


   .. py:method:: add_conditions(conditions: Dict[str, Condition]) -> None


   .. py:method:: get_component_paths() -> List[str]


   .. py:method:: columnar_update(data: whylogs.core.preprocessing.PreprocessedColumn) -> whylogs.core.metrics.metrics.OperationResult


   .. py:method:: zero(config: Optional[whylogs.core.metrics.metrics.MetricConfig] = None) -> ConditionCountMetric
      :classmethod:


   .. py:method:: to_protobuf() -> whylogs.core.proto.MetricMessage


   .. py:method:: to_summary_dict(cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> Dict[str, Any]


   .. py:method:: from_protobuf(msg: whylogs.core.proto.MetricMessage) -> ConditionCountMetric
      :classmethod:


   .. py:method:: get_namespace(config: Optional[MetricConfig] = None) -> str
      :classmethod:



