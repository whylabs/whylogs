:py:mod:`whylogs.core.view`
===========================

.. py:module:: whylogs.core.view


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   column_profile_view/index.rst
   dataset_profile_view/index.rst
   segmented_dataset_profile_view/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   whylogs.core.view.ColumnProfileView
   whylogs.core.view.DatasetProfileView




Attributes
~~~~~~~~~~

.. autoapisummary::

   whylogs.core.view.WHYLOGS_MAGIC_HEADER


.. py:class:: ColumnProfileView(metrics: Dict[str, METRIC], success_count: int = 0, failure_count: int = 0)

   Bases: :py:obj:`object`

   .. py:method:: merge(other: ColumnProfileView) -> ColumnProfileView


   .. py:method:: serialize() -> bytes


   .. py:method:: deserialize(serialized_profile: bytes) -> ColumnProfileView
      :classmethod:


   .. py:method:: get_metric(m_name: str) -> Optional[METRIC]


   .. py:method:: to_protobuf() -> whylogs.core.proto.ColumnMessage


   .. py:method:: get_metric_component_paths() -> List[str]


   .. py:method:: get_metric_names() -> List[str]


   .. py:method:: get_metrics() -> List[whylogs.core.metrics.metrics.Metric]


   .. py:method:: to_summary_dict(*, column_metric: Optional[str] = None, cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> Dict[str, Any]


   .. py:method:: zero(msg: whylogs.core.proto.ColumnMessage) -> ColumnProfileView
      :classmethod:


   .. py:method:: from_protobuf(msg: whylogs.core.proto.ColumnMessage) -> ColumnProfileView
      :classmethod:


   .. py:method:: from_bytes(data: bytes) -> ColumnProfileView
      :classmethod:



.. py:data:: WHYLOGS_MAGIC_HEADER
   :value: 'WHY1'

   

.. py:class:: DatasetProfileView(*, columns: Dict[str, whylogs.core.view.column_profile_view.ColumnProfileView], dataset_timestamp: Optional[datetime.datetime], creation_timestamp: Optional[datetime.datetime], metrics: Optional[Dict[str, Any]] = None, metadata: Optional[Dict[str, str]] = None)

   Bases: :py:obj:`whylogs.api.writer.writer.Writable`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:property:: dataset_timestamp
      :type: Optional[datetime.datetime]


   .. py:property:: creation_timestamp
      :type: Optional[datetime.datetime]


   .. py:property:: metadata
      :type: Dict[str, str]


   .. py:property:: model_performance_metrics
      :type: Any


   .. py:method:: add_model_performance_metrics(metric: Any) -> None


   .. py:method:: merge(other: DatasetProfileView) -> DatasetProfileView


   .. py:method:: get_column(col_name: str) -> Optional[whylogs.core.view.column_profile_view.ColumnProfileView]


   .. py:method:: get_columns(col_names: Optional[List[str]] = None) -> Dict[str, whylogs.core.view.column_profile_view.ColumnProfileView]


   .. py:method:: get_default_path() -> str


   .. py:method:: write(path: Optional[str] = None, **kwargs: Any) -> Tuple[bool, str]


   .. py:method:: serialize() -> bytes


   .. py:method:: zero() -> DatasetProfileView
      :classmethod:


   .. py:method:: deserialize(data: bytes) -> DatasetProfileView
      :classmethod:


   .. py:method:: read(path: str) -> DatasetProfileView
      :classmethod:


   .. py:method:: to_pandas(column_metric: Optional[str] = None, cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> whylogs.core.stubs.pd.DataFrame



