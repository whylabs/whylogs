:py:mod:`whylogs.api.whylabs.session.lazy`
==========================================

.. py:module:: whylogs.api.whylabs.session.lazy


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   whylogs.api.whylabs.session.lazy.Lazy




Attributes
~~~~~~~~~~

.. autoapisummary::

   whylogs.api.whylabs.session.lazy.T


.. py:data:: T

   

.. py:class:: Lazy(fn: Callable[[], T])

   Bases: :py:obj:`Generic`\ [\ :py:obj:`T`\ ]

   Abstract base class for generic types.

   A generic type is typically declared by inheriting from
   this class parameterized with one or more type variables.
   For example, a generic mapping type might be defined as::

     class Mapping(Generic[KT, VT]):
         def __getitem__(self, key: KT) -> VT:
             ...
         # Etc.

   This class can then be used as follows::

     def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
         try:
             return mapping[key]
         except KeyError:
             return default

   .. py:property:: value
      :type: T



