:py:mod:`whylogs.api.logger.experimental.logger.actor.thread_actor`
===================================================================

.. py:module:: whylogs.api.logger.experimental.logger.actor.thread_actor


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   whylogs.api.logger.experimental.logger.actor.thread_actor.ThreadQueueWrapper
   whylogs.api.logger.experimental.logger.actor.thread_actor.ThreadActor




Attributes
~~~~~~~~~~

.. autoapisummary::

   whylogs.api.logger.experimental.logger.actor.thread_actor.DefaultQueueWrapperType
   whylogs.api.logger.experimental.logger.actor.thread_actor.ThreadMessageType


.. py:data:: DefaultQueueWrapperType

   

.. py:class:: ThreadQueueWrapper

   Bases: :py:obj:`whylogs.api.logger.experimental.logger.actor.actor.QueueWrapper`\ [\ :py:obj:`DefaultQueueWrapperType`\ ], :py:obj:`Generic`\ [\ :py:obj:`DefaultQueueWrapperType`\ ]

   Implementation of QueueWrapper sufficient for use in the threaded actor.

   .. py:method:: send(message: DefaultQueueWrapperType, timeout: float = DEFAULT_TIMEOUT) -> None


   .. py:method:: send_many(messages: List[DefaultQueueWrapperType], timeout: float = DEFAULT_TIMEOUT) -> None


   .. py:method:: get(timeout: float = DEFAULT_TIMEOUT) -> Optional[DefaultQueueWrapperType]


   .. py:method:: get_many(timeout: float = DEFAULT_TIMEOUT, max: Optional[int] = None) -> List[DefaultQueueWrapperType]


   .. py:method:: size() -> int


   .. py:method:: close() -> None



.. py:data:: ThreadMessageType

   

.. py:class:: ThreadActor(queue_config: whylogs.api.logger.experimental.logger.actor.actor.QueueConfig = QueueConfig())

   Bases: :py:obj:`whylogs.api.logger.experimental.logger.actor.actor.Actor`\ [\ :py:obj:`ThreadMessageType`\ ], :py:obj:`threading.Thread`, :py:obj:`Generic`\ [\ :py:obj:`ThreadMessageType`\ ]

   Subclass of Actor that uses a thread to process messages.

   .. py:property:: name

      A string used for identification purposes only.

      It has no semantics. Multiple threads may be given the same name. The
      initial name is set by the constructor.

   .. py:property:: ident

      Thread identifier of this thread or None if it has not been started.

      This is a nonzero integer. See the get_ident() function. Thread
      identifiers may be recycled when a thread exits and another thread is
      created. The identifier is available even after the thread has exited.

   .. py:property:: daemon

      A boolean value indicating whether this thread is a daemon thread.

      This must be set before start() is called, otherwise RuntimeError is
      raised. Its initial value is inherited from the creating thread; the
      main thread is not a daemon thread and therefore all threads created in
      the main thread default to daemon = False.

      The entire Python program exits when only daemon threads are left.

   .. py:method:: run() -> None

      Method representing the thread's activity.

      You may override this method in a subclass. The standard run() method
      invokes the callable object passed to the object's constructor as the
      target argument, if any, with sequential and keyword arguments taken
      from the args and kwargs arguments, respectively.



   .. py:method:: close_message_handled() -> bool


   .. py:method:: set_close_message_handled() -> None


   .. py:method:: close_message_wait() -> None


   .. py:method:: is_done() -> bool


   .. py:method:: set_done() -> None

      Set this actor as done, meaning it has finished processing all messages.


   .. py:method:: done_wait() -> None


   .. py:method:: set_closed() -> None

      Sets this actor as closed, meaning it should no longer accept messages.


   .. py:method:: is_closed() -> bool


   .. py:method:: close() -> None


   .. py:method:: process_batch(batch: List[Union[MessageType, CloseMessage]], batch_type: Type[Union[MessageType, CloseMessage]]) -> None
      :abstractmethod:


   .. py:method:: send(message: Union[MessageType, CloseMessage]) -> None


   .. py:method:: send_many(messages: List[Union[MessageType, CloseMessage]]) -> None


   .. py:method:: process_messages() -> None


   .. py:method:: start()

      Start the thread's activity.

      It must be called at most once per thread object. It arranges for the
      object's run() method to be invoked in a separate thread of control.

      This method will raise a RuntimeError if called more than once on the
      same thread object.



   .. py:method:: join(timeout=None)

      Wait until the thread terminates.

      This blocks the calling thread until the thread whose join() method is
      called terminates -- either normally or through an unhandled exception
      or until the optional timeout occurs.

      When the timeout argument is present and not None, it should be a
      floating point number specifying a timeout for the operation in seconds
      (or fractions thereof). As join() always returns None, you must call
      is_alive() after join() to decide whether a timeout happened -- if the
      thread is still alive, the join() call timed out.

      When the timeout argument is not present or None, the operation will
      block until the thread terminates.

      A thread can be join()ed many times.

      join() raises a RuntimeError if an attempt is made to join the current
      thread as that would cause a deadlock. It is also an error to join() a
      thread before it has been started and attempts to do so raises the same
      exception.



   .. py:method:: is_alive()

      Return whether the thread is alive.

      This method returns True just before the run() method starts until just
      after the run() method terminates. See also the module function
      enumerate().



   .. py:method:: isDaemon()


   .. py:method:: setDaemon(daemonic)


   .. py:method:: getName()


   .. py:method:: setName(name)



