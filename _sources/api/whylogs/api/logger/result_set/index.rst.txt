:py:mod:`whylogs.api.logger.result_set`
=======================================

.. py:module:: whylogs.api.logger.result_set


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   whylogs.api.logger.result_set.ResultSetReader
   whylogs.api.logger.result_set.ResultSet
   whylogs.api.logger.result_set.ViewResultSet
   whylogs.api.logger.result_set.ProfileResultSet
   whylogs.api.logger.result_set.SegmentedResultSet




Attributes
~~~~~~~~~~

.. autoapisummary::

   whylogs.api.logger.result_set.logger
   whylogs.api.logger.result_set.ResultSetWriter


.. py:data:: logger

   

.. py:class:: ResultSetReader(reader: whylogs.api.reader.Reader)

   .. py:method:: option(**kwargs: Any) -> ResultSetReader


   .. py:method:: read(**kwargs: Any) -> ResultSet



.. py:class:: ResultSet

   Bases: :py:obj:`whylogs.api.writer.writer.Writable`, :py:obj:`abc.ABC`

   A holder object for profiling results.

   A whylogs.log call can result in more than one profile. This wrapper class
   simplifies the navigation among these profiles.

   Note that currently we only hold one profile but we're planning to add other
   kinds of profiles such as segmented profiles here.

   .. py:property:: metadata
      :type: Optional[Dict[str, str]]


   .. py:property:: count
      :type: int


   .. py:property:: performance_metrics
      :type: Optional[whylogs.core.model_performance_metrics.ModelPerformanceMetrics]


   .. py:method:: get_default_path() -> Optional[str]


   .. py:method:: write(path: Optional[str] = None, filename: Optional[str] = None, **kwargs: Any) -> Tuple[bool, Union[str, List[str]]]

      Writes the Writable's data to file(s) under `path` (excluding filename(s)) if specified,
      else under `_get_default_path()`. `filename` specifies the file to write there. Writables
      can generate a default filename if None is specified. Returns a bool that's True iff all
      files were written successfully and a list of the filenames (including path) written.


   .. py:method:: read(multi_profile_file: str) -> ResultSet
      :staticmethod:


   .. py:method:: reader(name: str = 'local') -> ResultSetReader
      :staticmethod:


   .. py:method:: view() -> Optional[whylogs.core.DatasetProfileView]
      :abstractmethod:


   .. py:method:: profile() -> Optional[whylogs.core.DatasetProfile]
      :abstractmethod:


   .. py:method:: get_writables() -> Optional[List[whylogs.api.writer.writer.Writable]]


   .. py:method:: set_dataset_timestamp(dataset_timestamp: datetime.datetime) -> None


   .. py:method:: add_model_performance_metrics(metrics: whylogs.core.model_performance_metrics.ModelPerformanceMetrics) -> None


   .. py:method:: add_metric(name: str, metric: whylogs.core.metrics.metrics.Metric) -> None


   .. py:method:: merge(other: ResultSet) -> ResultSet
      :abstractmethod:


   .. py:method:: writer(name: str = 'local', **kwargs: Any) -> WriterWrapper

      Utility method to create a Writer of the specified type



.. py:class:: ViewResultSet(view: whylogs.core.DatasetProfileView)

   Bases: :py:obj:`ResultSet`

   A holder object for profiling results.

   A whylogs.log call can result in more than one profile. This wrapper class
   simplifies the navigation among these profiles.

   Note that currently we only hold one profile but we're planning to add other
   kinds of profiles such as segmented profiles here.

   .. py:property:: metadata
      :type: Optional[Dict[str, str]]


   .. py:property:: count
      :type: int


   .. py:property:: performance_metrics
      :type: Optional[whylogs.core.model_performance_metrics.ModelPerformanceMetrics]


   .. py:method:: profile() -> Optional[whylogs.core.DatasetProfile]


   .. py:method:: view() -> Optional[whylogs.core.DatasetProfileView]


   .. py:method:: zero() -> ViewResultSet
      :staticmethod:


   .. py:method:: merge(other: ResultSet) -> ViewResultSet


   .. py:method:: set_dataset_timestamp(dataset_timestamp: datetime.datetime) -> None


   .. py:method:: get_default_path() -> Optional[str]


   .. py:method:: write(path: Optional[str] = None, filename: Optional[str] = None, **kwargs: Any) -> Tuple[bool, Union[str, List[str]]]

      Writes the Writable's data to file(s) under `path` (excluding filename(s)) if specified,
      else under `_get_default_path()`. `filename` specifies the file to write there. Writables
      can generate a default filename if None is specified. Returns a bool that's True iff all
      files were written successfully and a list of the filenames (including path) written.


   .. py:method:: read(multi_profile_file: str) -> ResultSet
      :staticmethod:


   .. py:method:: reader(name: str = 'local') -> ResultSetReader
      :staticmethod:


   .. py:method:: get_writables() -> Optional[List[whylogs.api.writer.writer.Writable]]


   .. py:method:: add_model_performance_metrics(metrics: whylogs.core.model_performance_metrics.ModelPerformanceMetrics) -> None


   .. py:method:: add_metric(name: str, metric: whylogs.core.metrics.metrics.Metric) -> None


   .. py:method:: writer(name: str = 'local', **kwargs: Any) -> WriterWrapper

      Utility method to create a Writer of the specified type



.. py:class:: ProfileResultSet(profile: whylogs.core.DatasetProfile)

   Bases: :py:obj:`ResultSet`

   A holder object for profiling results.

   A whylogs.log call can result in more than one profile. This wrapper class
   simplifies the navigation among these profiles.

   Note that currently we only hold one profile but we're planning to add other
   kinds of profiles such as segmented profiles here.

   .. py:property:: metadata
      :type: Optional[Dict[str, str]]


   .. py:property:: count
      :type: int


   .. py:property:: performance_metrics
      :type: Optional[whylogs.core.model_performance_metrics.ModelPerformanceMetrics]


   .. py:method:: profile() -> Optional[whylogs.core.DatasetProfile]


   .. py:method:: view() -> Optional[whylogs.core.DatasetProfileView]


   .. py:method:: zero() -> ProfileResultSet
      :staticmethod:


   .. py:method:: merge(other: ResultSet) -> ViewResultSet


   .. py:method:: get_default_path() -> Optional[str]


   .. py:method:: write(path: Optional[str] = None, filename: Optional[str] = None, **kwargs: Any) -> Tuple[bool, Union[str, List[str]]]

      Writes the Writable's data to file(s) under `path` (excluding filename(s)) if specified,
      else under `_get_default_path()`. `filename` specifies the file to write there. Writables
      can generate a default filename if None is specified. Returns a bool that's True iff all
      files were written successfully and a list of the filenames (including path) written.


   .. py:method:: read(multi_profile_file: str) -> ResultSet
      :staticmethod:


   .. py:method:: reader(name: str = 'local') -> ResultSetReader
      :staticmethod:


   .. py:method:: get_writables() -> Optional[List[whylogs.api.writer.writer.Writable]]


   .. py:method:: set_dataset_timestamp(dataset_timestamp: datetime.datetime) -> None


   .. py:method:: add_model_performance_metrics(metrics: whylogs.core.model_performance_metrics.ModelPerformanceMetrics) -> None


   .. py:method:: add_metric(name: str, metric: whylogs.core.metrics.metrics.Metric) -> None


   .. py:method:: writer(name: str = 'local', **kwargs: Any) -> WriterWrapper

      Utility method to create a Writer of the specified type



.. py:class:: SegmentedResultSet(segments: Dict[str, Dict[whylogs.core.Segment, Union[whylogs.core.DatasetProfile, whylogs.core.DatasetProfileView]]], partitions: Optional[List[whylogs.core.segmentation_partition.SegmentationPartition]] = None, metrics: Optional[Dict[str, Any]] = None, properties: Optional[Dict[str, Any]] = None)

   Bases: :py:obj:`ResultSet`

   A holder object for profiling results.

   A whylogs.log call can result in more than one profile. This wrapper class
   simplifies the navigation among these profiles.

   Note that currently we only hold one profile but we're planning to add other
   kinds of profiles such as segmented profiles here.

   .. py:property:: dataset_properties
      :type: Optional[Dict[str, Any]]


   .. py:property:: dataset_metrics
      :type: Optional[Dict[str, Any]]


   .. py:property:: partitions
      :type: Optional[List[whylogs.core.segmentation_partition.SegmentationPartition]]


   .. py:property:: count
      :type: int


   .. py:property:: model_performance_metric
      :type: Optional[whylogs.core.model_performance_metrics.ModelPerformanceMetrics]


   .. py:property:: metadata
      :type: Optional[Dict[str, str]]


   .. py:property:: performance_metrics
      :type: Optional[whylogs.core.model_performance_metrics.ModelPerformanceMetrics]


   .. py:method:: profile(segment: Optional[whylogs.core.Segment] = None) -> Optional[Union[whylogs.core.DatasetProfile, whylogs.core.DatasetProfileView]]


   .. py:method:: get_writables() -> Optional[List[whylogs.api.writer.writer.Writable]]


   .. py:method:: get_whylabs_tags() -> List[whylabs_client.model.segment_tag.SegmentTag]


   .. py:method:: get_timestamps() -> List[Optional[datetime.datetime]]


   .. py:method:: write(path: Optional[str] = None, filename: Optional[str] = None, **kwargs: Any) -> Tuple[bool, Union[str, List[str]]]

      Writes the Writable's data to file(s) under `path` (excluding filename(s)) if specified,
      else under `_get_default_path()`. `filename` specifies the file to write there. Writables
      can generate a default filename if None is specified. Returns a bool that's True iff all
      files were written successfully and a list of the filenames (including path) written.


   .. py:method:: set_dataset_timestamp(dataset_timestamp: datetime.datetime) -> None


   .. py:method:: segments(restrict_to_parition_id: Optional[str] = None) -> Optional[List[whylogs.core.Segment]]


   .. py:method:: segments_in_partition(partition: whylogs.core.segmentation_partition.SegmentationPartition) -> Optional[Dict[whylogs.core.Segment, Union[whylogs.core.DatasetProfile, whylogs.core.DatasetProfileView]]]


   .. py:method:: view(segment: Optional[whylogs.core.Segment] = None) -> Optional[whylogs.core.DatasetProfileView]


   .. py:method:: get_model_performance_metrics_for_segment(segment: whylogs.core.Segment) -> Optional[whylogs.core.model_performance_metrics.ModelPerformanceMetrics]


   .. py:method:: add_metrics_for_segment(metrics: whylogs.core.model_performance_metrics.ModelPerformanceMetrics, segment: whylogs.core.Segment) -> None


   .. py:method:: zero() -> SegmentedResultSet
      :staticmethod:


   .. py:method:: add_model_performance_metrics(metrics: whylogs.core.model_performance_metrics.ModelPerformanceMetrics) -> None


   .. py:method:: add_metric(name: str, metric: whylogs.core.metrics.metrics.Metric) -> None


   .. py:method:: merge(other: ResultSet) -> SegmentedResultSet


   .. py:method:: get_default_path() -> Optional[str]


   .. py:method:: read(multi_profile_file: str) -> ResultSet
      :staticmethod:


   .. py:method:: reader(name: str = 'local') -> ResultSetReader
      :staticmethod:


   .. py:method:: writer(name: str = 'local', **kwargs: Any) -> WriterWrapper

      Utility method to create a Writer of the specified type



.. py:data:: ResultSetWriter

   

