:py:mod:`whylogs.experimental.constraints_generation`
=====================================================

.. py:module:: whylogs.experimental.constraints_generation


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   condition_counts/index.rst
   count_metrics/index.rst
   distribution_metrics/index.rst
   frequent_items/index.rst
   multi_metrics/index.rst
   types_metrics/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   whylogs.experimental.constraints_generation.MetricConstraint
   whylogs.experimental.constraints_generation.DatasetProfileView



Functions
~~~~~~~~~

.. autoapisummary::

   whylogs.experimental.constraints_generation.generate_column_condition_count_constraints
   whylogs.experimental.constraints_generation.generate_column_count_constraints
   whylogs.experimental.constraints_generation.generate_column_distribution_constraints
   whylogs.experimental.constraints_generation.generate_column_frequent_items_constraints
   whylogs.experimental.constraints_generation.generate_column_multi_metrics_constraints
   whylogs.experimental.constraints_generation.generate_column_types_constraints
   whylogs.experimental.constraints_generation.generate_constraints_from_reference_profile



.. py:class:: MetricConstraint

   .. py:attribute:: condition
      :type: Callable[[whylogs.core.metrics.metrics.Metric], bool]

      

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: metric_selector
      :type: MetricsSelector

      

   .. py:attribute:: require_column_existence
      :type: bool
      :value: True

      

   .. py:method:: validate(dataset_profile: whylogs.core.view.dataset_profile_view.DatasetProfileView) -> bool


   .. py:method:: validate_profile(dataset_profile: whylogs.core.view.dataset_profile_view.DatasetProfileView) -> Tuple[bool, Optional[Dict[str, Any]]]



.. py:class:: DatasetProfileView(*, columns: Dict[str, whylogs.core.view.column_profile_view.ColumnProfileView], dataset_timestamp: Optional[datetime.datetime], creation_timestamp: Optional[datetime.datetime], metrics: Optional[Dict[str, Any]] = None, metadata: Optional[Dict[str, str]] = None)

   Bases: :py:obj:`whylogs.api.writer.writer.Writable`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:property:: dataset_timestamp
      :type: Optional[datetime.datetime]


   .. py:property:: creation_timestamp
      :type: Optional[datetime.datetime]


   .. py:property:: metadata
      :type: Dict[str, str]


   .. py:property:: model_performance_metrics
      :type: Any


   .. py:method:: add_model_performance_metrics(metric: Any) -> None


   .. py:method:: merge(other: DatasetProfileView) -> DatasetProfileView


   .. py:method:: get_column(col_name: str) -> Optional[whylogs.core.view.column_profile_view.ColumnProfileView]


   .. py:method:: get_columns(col_names: Optional[List[str]] = None) -> Dict[str, whylogs.core.view.column_profile_view.ColumnProfileView]


   .. py:method:: get_default_path() -> str


   .. py:method:: write(path: Optional[str] = None, **kwargs: Any) -> Tuple[bool, str]


   .. py:method:: serialize() -> bytes


   .. py:method:: zero() -> DatasetProfileView
      :classmethod:


   .. py:method:: deserialize(data: bytes) -> DatasetProfileView
      :classmethod:


   .. py:method:: read(path: str) -> DatasetProfileView
      :classmethod:


   .. py:method:: to_pandas(column_metric: Optional[str] = None, cfg: Optional[whylogs.core.configs.SummaryConfig] = None) -> whylogs.core.stubs.pd.DataFrame



.. py:function:: generate_column_condition_count_constraints(column_name: str, column_profile: whylogs.core.view.column_profile_view.ColumnProfileView) -> List[whylogs.core.constraints.metric_constraints.MetricConstraint]

   Generates constraints for the condition count metrics of a column.
   :param column_name: Name of the column
   :type column_name: str
   :param column_profile: Profile of the column
   :type column_profile: ColumnProfileView


.. py:function:: generate_column_count_constraints(column_name: str, column_profile: whylogs.core.view.column_profile_view.ColumnProfileView) -> List[whylogs.core.constraints.metric_constraints.MetricConstraint]

   Generates constraints for the count metrics of a column.
   :param column_name: Name of the column
   :type column_name: str
   :param column_profile: Profile of the column
   :type column_profile: ColumnProfileView


.. py:function:: generate_column_distribution_constraints(column_name: str, column_profile: whylogs.core.view.column_profile_view.ColumnProfileView) -> List[whylogs.core.constraints.metric_constraints.MetricConstraint]

   Generates constraints for the count metrics of a column.
   :param column_name: Name of the column
   :type column_name: str
   :param column_profile: Profile of the column
   :type column_profile: ColumnProfileView


.. py:function:: generate_column_frequent_items_constraints(column_name: str, column_profile: whylogs.core.view.column_profile_view.ColumnProfileView) -> List[whylogs.core.constraints.metric_constraints.MetricConstraint]


.. py:function:: generate_column_multi_metrics_constraints(column_name: str, column_profile: whylogs.core.view.column_profile_view.ColumnProfileView) -> List[whylogs.core.constraints.metric_constraints.MetricConstraint]


.. py:function:: generate_column_types_constraints(column_name: str, column_profile: whylogs.core.view.column_profile_view.ColumnProfileView) -> List[whylogs.core.constraints.metric_constraints.MetricConstraint]

   Generates constraints for the types metrics of a column.
   :param column_name: Name of the column
   :type column_name: str
   :param column_profile: Profile of the column
   :type column_profile: ColumnProfileView


.. py:function:: generate_constraints_from_reference_profile(reference_profile_view: whylogs.core.view.dataset_profile_view.DatasetProfileView, included_columns: Optional[List[str]] = None, excluded_columns: Optional[List[str]] = None) -> List[whylogs.core.constraints.metric_constraints.MetricConstraint]

   Generates constraints from a reference profile view.

   :param reference_profile_view: Reference profile view
   :type reference_profile_view: DatasetProfileView
   :param included_columns: List of columns to include, by default None
   :type included_columns: Optional[List[str]], optional
   :param excluded_columns: List of columns to exclude, by default None
   :type excluded_columns: Optional[List[str]], optional

   :returns: List of generated constraints
   :rtype: List[MetricConstraint]


