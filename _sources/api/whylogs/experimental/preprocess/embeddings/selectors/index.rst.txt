:py:mod:`whylogs.experimental.preprocess.embeddings.selectors`
==============================================================

.. py:module:: whylogs.experimental.preprocess.embeddings.selectors


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   whylogs.experimental.preprocess.embeddings.selectors.ReferenceSelector
   whylogs.experimental.preprocess.embeddings.selectors.PCACentroidsSelector
   whylogs.experimental.preprocess.embeddings.selectors.KMeansSelector
   whylogs.experimental.preprocess.embeddings.selectors.PCAKMeansSelector




Attributes
~~~~~~~~~~

.. autoapisummary::

   whylogs.experimental.preprocess.embeddings.selectors.logger


.. py:data:: logger

   

.. py:class:: ReferenceSelector

   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: calculate_references(X: whylogs.core.stubs.np.ndarray, y: Optional[whylogs.core.stubs.np.ndarray] = None) -> Tuple[whylogs.core.stubs.np.ndarray, List[Union[int, str]]]
      :abstractmethod:



.. py:class:: PCACentroidsSelector(n_components: int = 2, lower_percentile_limit: float = 0, upper_percentile_limit: float = 0)

   Bases: :py:obj:`ReferenceSelector`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: calculate_references(X: whylogs.core.stubs.np.ndarray, y: Optional[whylogs.core.stubs.np.ndarray] = None) -> Tuple[whylogs.core.stubs.np.ndarray, List[Union[int, str]]]



.. py:class:: KMeansSelector(n_clusters: int = 8, kmeans_kwargs={})

   Bases: :py:obj:`ReferenceSelector`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: calculate_references(X: whylogs.core.stubs.np.ndarray, y: Optional[whylogs.core.stubs.np.ndarray] = None) -> Tuple[whylogs.core.stubs.np.ndarray, List[Union[int, str]]]



.. py:class:: PCAKMeansSelector(n_clusters: int = 8, n_components: int = 2, kmeans_kwargs={})

   Bases: :py:obj:`ReferenceSelector`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: calculate_references(X: whylogs.core.stubs.np.ndarray, y: Optional[whylogs.core.stubs.np.ndarray] = None) -> Tuple[whylogs.core.stubs.np.ndarray, List[Union[int, str]]]



