swagger: "2.0"
info:
  description: "This is a flask sample server to test whylabs.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Whylabs Flask app"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: null
basePath: null
tags:
- name: "health"
  description: "Common Health operations"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "data"
  description: "Predictions and operations over a dataset"
schemes:
- "https"
- "http"
paths:
  /health:
    get:
      tags:
      - "health"
      summary: "Check if Flask App is up"
      description: ""
      operationId: "checkHealth"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Successful operation"
  /predict:
    post:
      tags:
        - "data"
      summary: "Predict the class given and input array"
      parameters:
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/FeatureVector"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful operation"
  /update:
    post:
      tags:
        - "data"
      summary: "Modify the dataset distribution randomly"
      description: ""
      operationId: "update"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful operation"
definitions:
  FeatureVector:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "number"
          format: "float"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
